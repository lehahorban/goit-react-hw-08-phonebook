{"version":3,"file":"static/js/972.265c88fb.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/filter/filter-selectors.js","components/Contacts/Contacts.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport style from './ContactForm.module.css';\n\nfunction ContactForm({ onAddContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    onAddContact({ name: name, number: number });\n    setName('');\n    setNumber('');\n  };\n\n  const onChange = event => {\n    const { name, value } = event.currentTarget;\n\n    if (name === 'name') {\n      setName(value);\n    }\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  return (\n    <form className={style.form} onSubmit={onSubmit}>\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={onChange}\n        value={name}\n      />\n\n      <label>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={onChange}\n        value={number}\n      />\n\n      <button className={style.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"loading\":\"ContactList_loading__QJfkF\",\"telLink\":\"ContactList_telLink__7nhCM\",\"image\":\"ContactList_image__W7K+k\",\"text\":\"ContactList_text__+NWAW\"};","import PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport style from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport image from './img/pngwing.com (6).png';\n\nfunction ContactList({ contacts, deleteUser }) {\n  const isLoading = useSelector(store => store.contacts.loading);\n  console.log(contacts.length);\n\n  return (\n    <div>\n      <ul className={style.list}>\n        <p>Contact</p>\n        {isLoading && <p className={style.loading}>Loading...</p>}\n        {contacts.map(({ id, name, phone, number }) => (\n          <li key={shortid.generate()}>\n            {name}:\n            {\n              <a className={style.telLink} href=\"tel:\">\n                <div className={style.imageWrapp}>\n                  <img className={style.image} src={image} alt=\"images\" />\n                  {number || phone}\n                </div>\n              </a>\n            }\n            <button onClick={() => deleteUser(id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n      {contacts.length === 0 && (\n        <p className={style.text}>Your phonebook is empty</p>\n      )}\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteUser: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import PropTypes from 'prop-types';\nimport style from './Filter.module.css';\n\nfunction Filter({ filter, onChange }) {\n  return (\n    <div className={style.filter}>\n      <label>Find contact by name</label>\n      <input type=\"text\" name=\"filter\" value={filter} onChange={onChange} />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","export const getContacts = ({ contacts }) => contacts.items;\n\nexport const getFilter = store => store.filter;\n\nexport const getFilterContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    const normalizedName = name.toLowerCase();\n    return normalizedName.includes(normalizedFilter);\n  });\n  return result;\n};\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport * as contactsOperations from '../../redux/contacts/contactsOperetions';\nimport style from '../../components/Style.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/filter/filter-actions';\nimport {\n  getFilter,\n  getFilterContacts,\n} from '../../redux/filter/filter-selectors';\nimport { toast } from 'react-toastify';\n\nconst Contacts = () => {\n  const contacts = useSelector(getFilterContacts);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const onAddContact = payload => {\n    const actions = contactsOperations.addContacts(payload);\n    const { name } = payload;\n    const contact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (contact) {\n      toast(`Contact ${name} already exists`);\n      return;\n    }\n\n    dispatch(actions);\n  };\n\n  const onRemoveContact = payload => {\n    dispatch(contactsOperations.removeContacts(payload));\n  };\n\n  const onFilterContact = event => {\n    dispatch(filterContacts(event.target.value));\n  };\n\n  return (\n    <div className={style.app}>\n      <p>Phonebook</p>\n      <ContactForm onAddContact={onAddContact} />\n      <Filter filter={filter} onChange={onFilterContact} />\n      <ContactList contacts={contacts} deleteUser={onRemoveContact} />\n    </div>\n  );\n};\n\nexport default Contacts;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["onAddContact","useState","name","setName","number","setNumber","onChange","event","currentTarget","value","className","style","onSubmit","preventDefault","type","pattern","title","required","contacts","deleteUser","isLoading","useSelector","store","loading","console","log","length","map","id","phone","href","src","image","alt","onClick","shortid","filter","getFilter","getFilterContacts","items","normalizedFilter","toLowerCase","includes","dispatch","useDispatch","useEffect","contactsOperations","payload","actions","find","contact","toast","filterContacts","target","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","LN2","step"],"sourceRoot":""}